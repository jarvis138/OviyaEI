from __future__ import annotations

from typing import Dict


class VulnerabilityReciprocationSystem:
    """Optional, careful self-disclosure phrasing (Rogers-aligned).
    Disabled by default unless feature flag enabled.
    """

    def __init__(self, enabled: bool = False):
        """
        Initialize the VulnerabilityReciprocationSystem and set whether self-disclosure is enabled.
        
        Parameters:
            enabled (bool): When True, enables the optional Rogers-aligned self-disclosure behavior; when False, the system remains disabled. Defaults to False.
        """
        self.enabled = enabled

    def maybe_disclose(self, user_text: str, base_text: str) -> str:
        """
        Optionally append a brief Rogers-aligned supportive self-disclosure to a base response when a user's message indicates deep vulnerability.
        
        If the system is not enabled, returns `base_text` unchanged. When enabled and the user's message contains markers of deep vulnerability (e.g., expressions of shame, fear, isolation, or self-hatred), appends a concise empathic sentence and a prompt about current coping; otherwise returns `base_text` unchanged.
        
        Parameters:
            user_text (str): The user's recent message to inspect for vulnerability markers.
            base_text (str): The original response text to which a supportive phrase may be appended.
        
        Returns:
            str: `base_text` with a supportive sentence appended if enabled and a vulnerability marker is detected, `base_text` otherwise.
        """
        if not self.enabled:
            return base_text
        # Heuristic: deep vulnerability markers
        lower = (user_text or "").lower()
        if any(k in lower for k in ["ashamed", "i failed", "i'm scared", "i'm alone", "i hate myself"]):
            # Brief, normalize, pivot back
            extra = " I know that feeling—of being pulled down by it. What’s helping you cope right now?"
            return base_text + extra
        return base_text

